(async function () {
  // –í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
  const targetLabels = [
      "–ü—É–Ω–∫—Ç: 2 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 2(1) –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 3 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 4 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 5 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 6 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 7 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 8 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 9 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 10 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 11 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 12 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 13 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 14 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 15 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 16 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 17 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 17(1) –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 18 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 19 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 21 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 22 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 23 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 25 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 26 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 27 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 28 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 30 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 31 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 32 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 33 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 34 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 35 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 36 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 37 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 38 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 39 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 40 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 41 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 42 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 43 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 44 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 45 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 46 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 47 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 48 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 49 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 50 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 51 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 52 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 53 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 54 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 55 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 56 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 57 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 58 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 60 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 77 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 78 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 79 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 80 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 81 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 82 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 83 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 84 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 85 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 86 –ü—Ä–∞–≤–∏–ª", "–ü—É–Ω–∫—Ç: 87 –ü—Ä–∞–≤–∏–ª"
  ];

  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
  const excludeMap = {
    "–ü—É–Ω–∫—Ç: 2 –ü—Ä–∞–≤–∏–ª": [
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 1",
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 2",
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 3"
    ],
    "–ü—É–Ω–∫—Ç: 3 –ü—Ä–∞–≤–∏–ª": [
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 2"
    ],
    "–ü—É–Ω–∫—Ç: 13 –ü—Ä–∞–≤–∏–ª": [
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 2"
    ],
    "–ü—É–Ω–∫—Ç: 16 –ü—Ä–∞–≤–∏–ª": [
      "–ü–æ–¥–ø—É–Ω–∫—Ç: –∞"
    ],
    "–ü—É–Ω–∫—Ç: 17(1) –ü—Ä–∞–≤–∏–ª": [
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 2"
    ],
    "–ü—É–Ω–∫—Ç: 26 –ü—Ä–∞–≤–∏–ª": [
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 3"
    ],
    "–ü—É–Ω–∫—Ç: 37 –ü—Ä–∞–≤–∏–ª": [
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 4"
    ],
    "–ü—É–Ω–∫—Ç: 43 –ü—Ä–∞–≤–∏–ª": [
      "–î—Ä—É–≥–æ–µ / –ø—Ä–æ—á–µ–µ: –∞–±–∑–∞—Ü 2"
    ],
    "–ü—É–Ω–∫—Ç: 79 –ü—Ä–∞–≤–∏–ª": [
      "–ü–æ–¥–ø—É–Ω–∫—Ç: –∏"
    ],
    "–ü—É–Ω–∫—Ç: 80 –ü—Ä–∞–≤–∏–ª": [
      "–ü–æ–¥–ø—É–Ω–∫—Ç: –∂"
    ],
  };

  const normalize = txt => txt?.replace(/\xa0/g, ' ').replace(/\s+/g, ' ').trim();

  const clickSpan = s => {
    s?.scrollIntoView({ behavior: 'auto', block: 'center' }); // –±—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–æ–ª–ª
    s?.focus();
    s?.click();
  };

  const getMarginLeft = el => {
    const style = el.getAttribute('style') || '';
    const match = style.match(/margin-left:\s*calc\(14% \+ (\d+)px\)/);
    return match ? parseInt(match[1]) : 0;
  };

  const allUnits = Array.from(document.querySelectorAll('div._UnitWrapper_5g54m_7'));
  const normalizeMap = new Map(allUnits.map(u => [normalize(u.querySelector('span')?.textContent), u]));

  for (const targetLabel of targetLabels) {
    const targetWrapper = normalizeMap.get(normalize(targetLabel));
    if (!targetWrapper) {
      console.warn(`‚ùå –ü—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${targetLabel}`);
      continue;
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω: ${targetLabel}`);
    const success = [], failed = [];
    let expanded = false;

    const collapseIcon = targetWrapper.querySelector('svg._IconCollapse_5g54m_18');
    const iconParent = collapseIcon?.closest('div');

    if (iconParent) {
      iconParent.click();
      expanded = true;
      console.log("üìÇ –ü—É–Ω–∫—Ç —Ä–∞—Å–∫—Ä—ã—Ç");
      await new Promise(r => setTimeout(r, 150));
    } else {
      console.warn(`‚ö†Ô∏è –ü—É–Ω–∫—Ç "${targetLabel}" –Ω–µ –∏–º–µ–µ—Ç –∏–∫–æ–Ω–∫–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ç–º–µ—Ç–∏—Ç—å`);
    }

    if (expanded) {
      const container = targetWrapper.closest('div._Wrapper_5g54m_1');
      const allNested = Array.from(container?.querySelectorAll('div._UnitWrapper_5g54m_7') ?? []);
      const maxDepth = Math.max(...allNested.map(getMarginLeft));

      for (const unit of allNested) {
        const span = unit.querySelector('span');
        const input = unit.querySelector('input._CheckboxInput_7esd8_10');
        const style = span?.getAttribute('style') || '';
        const margin = getMarginLeft(unit);
        const text = normalize(span?.textContent);

        if (
          span && input &&
          style.includes("cursor: pointer") &&
          margin === maxDepth
        ) {
          // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –µ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö
          const exclusions = excludeMap[targetLabel] || [];
          const isExcluded = exclusions.some(ex => text.includes(ex));
          if (isExcluded) {
            console.log(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∏—Å–∫–ª—é—á–µ–Ω–æ): ${text}`);
            continue;
          }

          clickSpan(span);
          await new Promise(r => setTimeout(r, 100));
          input.checked ? success.push(text) : failed.push(text);
        }
      }
    } else {
      const span = targetWrapper.querySelector('span');
      const input = targetWrapper.querySelector('input._CheckboxInput_7esd8_10');
      const style = span?.getAttribute('style') || '';
      const text = normalize(span?.textContent);

      // –î–ª—è –ø—É–Ω–∫—Ç–∞ –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const exclusions = excludeMap[targetLabel] || [];
      const isExcluded = exclusions.some(ex => text.includes(ex));

      if (span && input && style.includes("cursor: pointer") && !isExcluded) {
        clickSpan(span);
        await new Promise(r => setTimeout(r, 100));
        input.checked ? success.push(text) : failed.push(text);
      } else if (isExcluded) {
        console.log(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∏—Å–∫–ª—é—á–µ–Ω–æ): ${text}`);
      } else {
        failed.push(`${targetLabel} (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏)`);
      }
    }

    console.log(`‚úÖ –û—Ç–º–µ—á–µ–Ω–æ (${targetLabel}) ‚Äî ${success.length}:`);
    success.forEach(t => console.log(`‚Äî ${t}`));
    if (failed.length) {
      console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å (${targetLabel}) ‚Äî ${failed.length}:`);
      failed.forEach(t => console.warn(`‚Äî ${t}`));
    } else {
      console.log(`üéâ –í—Å–µ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω—ã –¥–ª—è "${targetLabel}"`);
    }
  }
})();

